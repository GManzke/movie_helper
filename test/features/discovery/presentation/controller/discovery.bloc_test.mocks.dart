// Mocks generated by Mockito 5.0.15 from annotations
// in movie_helper/test/features/discovery/presentation/controller/discovery.bloc_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_helper/core/failures.dart' as _i5;
import 'package:movie_helper/features/discovery/domain/entities/movie.entity.dart'
    as _i6;
import 'package:movie_helper/features/discovery/domain/usecase/get_popular_movies.usecase.dart'
    as _i3;
import 'package:movie_helper/features/favorites/domain/usecase/store_favorite_movie.usecase.dart'
    as _i7;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [GetPopularMoviesUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMoviesUseCase extends _i1.Mock
    implements _i3.GetPopularMoviesUseCase {
  MockGetPopularMoviesUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>> call(int? page) =>
      (super.noSuchMethod(Invocation.method(#call, [page]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i6.MovieEntity>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i6.MovieEntity>>>);

  @override
  String toString() => super.toString();
}

/// A class which mocks [StoreFavoriteMovieUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreFavoriteMovieUseCase extends _i1.Mock
    implements _i7.StoreFavoriteMovieUseCase {
  MockStoreFavoriteMovieUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, _i2.None<dynamic>>> call(
          _i6.MovieEntity? param) =>
      (super.noSuchMethod(Invocation.method(#call, [param]),
          returnValue: Future<_i2.Either<_i5.Failure, _i2.None<dynamic>>>.value(
              _FakeEither_0<_i5.Failure, _i2.None<dynamic>>())) as _i4
          .Future<_i2.Either<_i5.Failure, _i2.None<dynamic>>>);

  @override
  String toString() => super.toString();
}
