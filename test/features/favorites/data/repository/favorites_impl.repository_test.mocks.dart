// Mocks generated by Mockito 5.0.15 from annotations
// in movie_helper/test/features/favorites/data/repository/favorites_impl.repository_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i3;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movie_helper/features/discovery/data/model/movie.model.dart'
    as _i4;
import 'package:movie_helper/features/favorites/data/datasource/favorites.datasource.dart'
    as _i2;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis

/// A class which mocks [FavoritesDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockFavoritesDataSource extends _i1.Mock
    implements _i2.FavoritesDataSource {
  MockFavoritesDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i4.MovieModel>> fetchFavoriteMovies() => (super.noSuchMethod(
          Invocation.method(#fetchFavoriteMovies, []),
          returnValue: Future<List<_i4.MovieModel>>.value(<_i4.MovieModel>[]))
      as _i3.Future<List<_i4.MovieModel>>);

  @override
  _i3.Future<void> storeFavoriteMovie(_i4.MovieModel? movie) =>
      (super.noSuchMethod(Invocation.method(#storeFavoriteMovie, [movie]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i3.Future<void>);

  @override
  String toString() => super.toString();
}
